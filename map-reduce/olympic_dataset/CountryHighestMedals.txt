package mapred.olympicsdata.programs;

import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class CountryHighestMedals {

	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration cobj = new Configuration();
		Job jobj = Job.getInstance(cobj," ");
		jobj.setJarByClass(CountryHighestMedals.class);
		jobj.setMapperClass(Map.class);
		jobj.setReducerClass(Red.class);
		jobj.setMapOutputKeyClass(Text.class);
		jobj.setMapOutputValueClass(Text.class);
		jobj.setOutputKeyClass(NullWritable.class);
		jobj.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(jobj, new Path(args[0]));
		FileSystem.get(cobj).delete(new Path(args[1]), true);
		FileOutputFormat.setOutputPath(jobj, new Path(args[1]));
		System.exit(jobj.waitForCompletion(true) ? 0 : 1);
	}

public static class Map extends Mapper<LongWritable,Text,Text,Text>
{
	public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException
	{
		String strValue = value.toString();
		String[] valueArr = strValue.split("\t");
		String nation = valueArr[2];
		String gMedals = valueArr[6];	
		String sMedals = valueArr[7];
		String bMedals = valueArr[8];
		String gsb = gMedals+","+sMedals+","+bMedals;
		context.write(new Text(nation), new Text(gsb));
	}
}

public static class Red extends Reducer<Text,Text,NullWritable,Text>
{
	TreeMap<Integer,String> gMap = new TreeMap<>();
	TreeMap<Integer,String> sMap = new TreeMap<>();
	TreeMap<Integer,String> bMap = new TreeMap<>();
	String result;
	public void reduce(Text key,Iterable<Text> value, Context context) throws IOException, InterruptedException
	{
		int gTot = 0;
		int sTot = 0;
		int bTot = 0;
		int gMedals=0;
		int sMedals = 0;
		int bMedals = 0;
		for(Text v : value)
		{
			String gsb[] = v.toString().split(",");
			gMedals = Integer.parseInt(gsb[0].toString());
			sMedals = Integer.parseInt(gsb[1].toString());
			bMedals = Integer.parseInt(gsb[2].toString());
			gTot+=gMedals;
			sTot+=sMedals;
			bTot+=bMedals;
		}
		gMap.put(gTot,key.toString());
		sMap.put(sTot,key.toString());
		bMap.put(bTot,key.toString());
		while(gMap.size() > 1)
		{
			gMap.remove(gMap.firstKey());
		}
		while(sMap.size() > 1)
		{
			sMap.remove(sMap.firstKey());
		}
		while(bMap.size() > 1)
		{
			bMap.remove(bMap.firstKey());
		}
		result = "Nation with highest gold medals: "+ gMap.toString()+
				"\nNation with highest silver medals: "+ sMap.toString()+
				"\nNation with highest bronze medals: "+ bMap.toString();
	}
	public void cleanup(Context context) throws IOException, InterruptedException
	{
		context.write(NullWritable.get(), new Text(result));
	}
}
}
