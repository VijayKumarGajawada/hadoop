package mapred.programs;

import java.io.IOException;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.Map;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class BestMonthlyCust {

	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration cobj = new Configuration();
		Job jobj = Job.getInstance(cobj," ");
		jobj.setJarByClass(BestMonthlyCust.class);
		jobj.setMapperClass(MyMapper.class);
		jobj.setReducerClass(MyReducer.class);
		jobj.setMapOutputKeyClass(Text.class);
		jobj.setMapOutputValueClass(Text.class);
		jobj.setOutputKeyClass(Text.class);
		jobj.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(jobj, new Path(args[0]));
		FileSystem.get(cobj).delete(new Path(args[1]), true);
		FileOutputFormat.setOutputPath(jobj, new Path(args[1]));
		System.exit(jobj.waitForCompletion(true) ? 0 : 1);
	}

public static class MyMapper extends Mapper<LongWritable,Text,Text,Text>
{
	public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException
	{
		String strValue = value.toString();
		String[] valueArr = strValue.split(",");
		String date = valueArr[1];
		String custId = valueArr[2];
		String price = valueArr[3];
		String[] dateSplit = date.split("-", 2);
		String month = dateSplit[0];
		String cust_price = custId + "," + price;
		context.write(new Text(month), new Text(cust_price));
	}
}

public static class MyReducer extends Reducer<Text,Text,Text,Text>
{
	public void reduce(Text key,Iterable<Text> value, Context context) throws IOException, InterruptedException
	{
		TreeMap<Float,String> tmap = new TreeMap<>();
		HashMap<String,Float> hmap = new HashMap<String,Float>();
		float price= 0.0f;
		float tot = 0;
		for(Text v : value)
		{
			String valueArr[] = v.toString().split(",");
			String cust = valueArr[0];
			price = Float.parseFloat(valueArr[1]);
			if(hmap.containsKey(cust))
			{
				float existPrice = hmap.get(cust);
				hmap.put(cust, existPrice+price);
			}
			else
			{
				hmap.put(cust,price);
			}
		}
		for(Map.Entry<String, Float> entry: hmap.entrySet()) 
		{
			String cust = entry.getKey();
			float custPrice = entry.getValue();
		    tmap.put(custPrice,cust);
		    if(tmap.size()>1)
		    {
		    	tmap.remove(tmap.firstKey());
		    }
		}
		context.write(new Text(key), new Text(tmap.toString()));
	}
}
}
