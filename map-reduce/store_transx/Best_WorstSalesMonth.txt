package mapred.programs;

import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Best_WorstSalesMonth {

	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration cobj = new Configuration();
		Job jobj = Job.getInstance(cobj," ");
		jobj.setJarByClass(Best_WorstSalesMonth.class);
		jobj.setMapperClass(Map.class);
		jobj.setReducerClass(Red.class);
		jobj.setMapOutputKeyClass(Text.class);
		jobj.setMapOutputValueClass(FloatWritable.class);
		jobj.setOutputKeyClass(Text.class);
		jobj.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(jobj, new Path(args[0]));
		FileSystem.get(cobj).delete(new Path(args[1]), true);
		FileOutputFormat.setOutputPath(jobj, new Path(args[1]));
		System.exit(jobj.waitForCompletion(true) ? 0 : 1);
	}

public static class Map extends Mapper<LongWritable,Text,Text,FloatWritable>
{
	public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException
	{
		String strValue = value.toString();
		String[] valueArr = strValue.split(",");
		String date = valueArr[1];
		float ordPrice = Float.parseFloat(valueArr[3]);
		String[] dateSplit = date.split("-", 2);
		String month = dateSplit[0];
		context.write(new Text(month), new FloatWritable(ordPrice));
	}
}

public static class Red extends Reducer<Text,FloatWritable,Text,Text>
{
	TreeMap<Float, String> tmap = new TreeMap<Float,String>();
	String bestWorst;
	public void reduce(Text key,Iterable<FloatWritable> value, Context context) throws IOException, InterruptedException
	{
		float sum=0;
		for(FloatWritable i : value)
		{
			sum+=i.get();
		}
		tmap.put(sum,key.toString());
		bestWorst = "Best month for sales: "+tmap.get(tmap.lastKey())+"  Worst month for sales: "+tmap.get(tmap.firstKey());
	}
	public void cleanup(Context context) throws IOException, InterruptedException
	{
	context.write(new Text(""), new Text(bestWorst));
	}
}
}
