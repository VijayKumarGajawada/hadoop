package mapred.programs;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class MostPrefPayment {

	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration cobj = new Configuration();
		Job jobj = Job.getInstance(cobj," ");
		jobj.setJarByClass(MostPrefPayment.class);
		jobj.setMapperClass(Map.class);
		jobj.setReducerClass(Red.class);
		jobj.setMapOutputKeyClass(Text.class);
		jobj.setMapOutputValueClass(Text.class);
		jobj.setOutputKeyClass(Text.class);
		jobj.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(jobj, new Path(args[0]));
		FileSystem.get(cobj).delete(new Path(args[1]), true);
		FileOutputFormat.setOutputPath(jobj, new Path(args[1]));
		System.exit(jobj.waitForCompletion(true) ? 0 : 1);
	}

public static class Map extends Mapper<LongWritable,Text,Text,Text>
{
	public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException
	{
		String strValue = value.toString();
		String[] valueArr = strValue.split(",");
		String paymentMode = valueArr[8];
		context.write(new Text(""), new Text(paymentMode));
	}
}

public static class Red extends Reducer<Text,Text,Text,Text>
{
	public void reduce(Text key,Iterable<Text> value, Context context) throws IOException, InterruptedException
	{
		String out = "", prefMode="";
		int creditCount =0, cashCount = 0;
		for(Text t : value)
		{
			out = t.toString();
			if(out.equals("credit"))
			{
				creditCount++;
			}
			if(out.equals("cash"))
			{
				cashCount++;
			}
		}
		context.write(new Text(), new Text("Credit: "+creditCount+" Cash: "+cashCount));
	}
}
}
