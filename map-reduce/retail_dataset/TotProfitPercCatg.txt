package mapreduce.retail;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class TotProfitPercCatg {

	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration cobj = new Configuration();
		Job jobj = Job.getInstance(cobj," ");
		jobj.setJarByClass(TotProfitPercCatg.class);
		jobj.setMapperClass(MyMapper.class);
		jobj.setReducerClass(MyReducer.class);
		jobj.setMapOutputKeyClass(Text.class);
		jobj.setMapOutputValueClass(Text.class);
		jobj.setOutputKeyClass(Text.class);
		jobj.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(jobj, new Path(args[0]));
		FileSystem.get(cobj).delete(new Path(args[1]), true);
		FileOutputFormat.setOutputPath(jobj, new Path(args[1]));
		System.exit(jobj.waitForCompletion(true) ? 0 : 1);
	}

public static class MyMapper extends Mapper<LongWritable,Text,Text,Text>
{
	public void map(LongWritable key, Text value, Context contx) throws IOException, InterruptedException
	{
		String strValue = value.toString();
		String[] valueArr = strValue.split(";");
		String prodCatg = valueArr[4].trim();
		long cost = Long.parseLong(valueArr[7]);
		long sale = Long.parseLong(valueArr[8]);
		long profit = sale - cost;
		String profit_cost = String.valueOf(profit) + "," + String.valueOf(cost);
		contx.write(new Text(prodCatg), new Text(profit_cost));
	}
}

public static class MyReducer extends Reducer<Text,Text,Text,Text>
{
	public void reduce(Text key,Iterable<Text> values, Context context) throws IOException, InterruptedException
	{
		float profit = 0.0f , cost = 0.0f ;
		float profitPerc = 0.0f;
		float totProfit = 0.0f, totCost = 0.0f;
		for(Text val : values)
		{
			String valArr[] = val.toString().split(",");
			profit = Float.parseFloat(valArr[0]);
			cost = Float.parseFloat(valArr[1]);
			totProfit += profit;
			totCost += cost;
		}
		profitPerc = (totProfit/totCost) * 100;
		context.write(new Text(key) , new Text(String.valueOf(profitPerc)));
	}
}
}
